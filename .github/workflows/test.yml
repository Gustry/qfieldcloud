name: Test

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

env:
  REGISTRY: ghcr.io

jobs:
  # Apply formatter and fail on errors
  check_format:
    name: Check code formatting
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Check code formatting
        uses: pre-commit/action@v3.0.0

  # Build all images for services declaring a build
  # Push them onto the repository's Github Container Registry
  build_push__app:
    name: Build app
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./docker-app
          file: ./docker-app/Dockerfile
          target: webserver_test
          build-args: DEBUG_BUILD=1
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/app:${{ github.head_ref }}.${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

  build_push__worker_wrapper:
    name: Build worker_wrapper
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./docker-app
          file: ./docker-app/Dockerfile
          target: worker_wrapper_runtime
          build-args: DEBUG_BUILD=1
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/worker_wrapper:${{ github.head_ref }}.${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

  build_push__redis:
    name: Build redis
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v4
        with:
          context: ./docker-redis
          build-args: REDIS_PASSWORD=change_me_with_a_very_loooooooooooong_password
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/redis:${{ github.head_ref }}.${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

  build_push__qgis:
    name: Build qgis
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./docker-qgis
          build-args: QGIS_TEST_VERSION=${{ github.head_ref }}.${{ github.sha }}
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/qgis:${{ github.head_ref }}.${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

  # Concurrently test the 'django apps' below
  # (in separate jobs) after pulling all images
  # Walk through the entire matrix of django apps
  # disregarding failures on the way.
  test_with_matrix:
    # Ideally the jobs defined in the matrix should be run as part of a separate workflow, using
    # the 'workflow_run' trigger condition. But this trigger activates only when the current branch == the default branch.
    # This means Pull Requests will never trigger it. Hence 'needs'.
    needs:
      - build_push__app
      - build_push__worker_wrapper
      - build_push__qgis
      - build_push__redis
    strategy:
      fail-fast: false
      matrix:
        django_apps:
          - authentication
          - notifs
          - subscription
          - core
    name: Run tests
    runs-on: ubuntu-22.04
    continue-on-error: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup & run all tests
        env:
          IMG_REG_REPO: ${{ env.REGISTRY }}/${{ github.repository }}
          IMG_HEAD_SHA: ${{ github.head_ref }}.${{ github.sha }}
        run: |
          ./scripts/setup.sh
          docker compose run app python manage.py test --keepdb -v2 qfieldcloud.${{ matrix.django_apps }}

      - name: Add comment to pr
        if: failure() && github.event_name == 'pull_request'
        uses: opengisch/comment-pr-with-images@0.0.4
        with:
          images: "tests_artifacts/**/*"

      - name: "failure logs"
        if: failure()
        run: |
          docker compose logs
